{"version":3,"sources":["webpack://prims-algorithm-in/./src/prims.js","webpack://prims-algorithm-in/./src/index.js"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;;AAEA,yBAAyB,wBAAwB;AACjD;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,UAAU;AACV;;AAEA,gDAAe,KAAK,EAAC;;;ACxDA;AACO;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,uCAAuC,GAAG,SAAK;AAC1D;AACA;;AAEA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,YAAY,GAAG,YAAY,GAAG,gBAAgB;AACvE,KAAK;;AAEL,8BAA8B,aAAa;;AAE3C;AACA;AACA;;AAEA;AACA,yDAAyD,aAAa;AACtE;AACA,CAAC","file":"app.f8ca092da6af377c47c6.js","sourcesContent":["function prims(matrixArr) {\n  let resultWeight = 0;\n  const visited = [];\n  const edges = [];\n  let min = Infinity;\n  let unconnectedGraphFlag = true;\n\n  findInitialNode();\n  createEdges();\n\n  function findInitialNode() {\n    let target = 0;\n    for (let i = 0; i < 7; i += 1) {\n      for (let j = 0; j < 7; j += 1) {\n        if (matrixArr[i][j] < min && matrixArr[i][j] !== 0) {\n          min = matrixArr[i][j];\n          target = i;\n        }\n      }\n    }\n    visited.push(target);\n  }\n\n  function createEdges() {\n    let rowNode = 0;\n    let columnNode = 0;\n\n    for (let k = 0; k < 6; k += 1) {\n      min = Infinity;\n      unconnectedGraphFlag = true;\n\n      for (let index = 0; index < visited.length; index += 1) {\n        const i = visited[index];\n        for (let j = 0; j < 7; j += 1) {\n          if (\n            matrixArr[i][j] < min &&\n            !visited.includes(j) &&\n            matrixArr[i][j] !== 0\n          ) {\n            unconnectedGraphFlag = false;\n            min = matrixArr[i][j];\n            columnNode = j;\n            rowNode = i;\n          }\n        }\n      }\n\n      visited.push(columnNode);\n      edges.push([rowNode, columnNode]);\n      resultWeight += min;\n    }\n  }\n\n  return { edges, resultWeight, unconnectedGraphFlag };\n}\n\nexport default prims;\n","import './style.css';\nimport prims from './prims';\n\nconst DOMNodes = (() => {\n  const matrix = document.querySelector('#matrix');\n  const generateBtn = document.querySelector('#generate-button');\n  const findPathBtn = document.querySelector('#find-path');\n  const resultText = document.querySelector('#result-text');\n  const resultWeight = document.querySelector('#result-weight');\n  return {\n    matrix,\n    generateBtn,\n    findPathBtn,\n    resultText,\n    resultWeight,\n  };\n})();\n\n(() => {\n  const matrixElementFields = initialMatrix();\n\n  DOMNodes.generateBtn.addEventListener('click', randomiseMatrixDivs);\n  DOMNodes.findPathBtn.addEventListener('click', main);\n\n  function initialMatrix() {\n    const arr = [];\n    for (let i = 0; i < 7; i += 1) {\n      arr.push([]);\n      for (let j = 0; j < 7; j += 1) {\n        const matrixElement = document.createElement('input');\n        matrixElement.classList.add('matrix-element');\n        matrixElement.value = 0;\n        arr[i][j] = matrixElement;\n        DOMNodes.matrix.appendChild(matrixElement);\n      }\n    }\n    return arr;\n  }\n  function randomiseMatrixDivs() {\n    for (let i = 0; i < 7; i += 1) {\n      for (let j = 0; j < 7; j += 1) {\n        if (i === j) {\n          matrixElementFields[i][j].value = 0;\n        }\n        if (i < j) {\n          matrixElementFields[i][j].value = Math.trunc(Math.random() * 26);\n        } else {\n          matrixElementFields[i][j].value = matrixElementFields[j][i].value;\n        }\n      }\n    }\n  }\n\n  function main() {\n    const matrixArr = constructArrFromFields(matrixElementFields);\n    const { edges, resultWeight, unconnectedFlag } = prims(matrixArr);\n    printResult(edges, resultWeight, matrixArr, unconnectedFlag);\n  }\n\n  function constructArrFromFields(matrixFields) {\n    const arr = [];\n    for (let i = 0; i < 7; i += 1) {\n      arr.push([]);\n      for (let j = 0; j < 7; j += 1) {\n        arr[i][j] = +matrixFields[i][j].value;\n      }\n    }\n    return arr;\n  }\n  function printResult(edges, resultWeight, matrixArr, unconnectedGraphFlag) {\n    const alphaMap = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\n    let resultString = '';\n\n    edges.forEach((edge) => {\n      const [i, j] = edge;\n      resultString += `${alphaMap[i]}-${alphaMap[j]}(${matrixArr[i][j]}), `;\n    });\n\n    resultString = `Result: ${resultString}`;\n\n    if (unconnectedGraphFlag) {\n      resultString += ' (Unconnected Graph)';\n    }\n\n    DOMNodes.resultText.textContent = resultString;\n    DOMNodes.resultWeight.textContent = `Total Weight: ${resultWeight}`;\n  }\n})();\n"],"sourceRoot":""}