{"version":3,"sources":["webpack://prims-algorithm-in/./src/prims.js","webpack://prims-algorithm-in/./src/index.js"],"names":["DOMNodes","matrix","document","querySelector","generateBtn","findPathBtn","resultText","resultWeight","matrixElementFields","arr","i","push","j","matrixElement","createElement","classList","add","value","appendChild","initialMatrix","addEventListener","Math","trunc","random","matrixArr","matrixFields","constructArrFromFields","edges","unconnectedFlag","visited","min","Infinity","unconnectedGraphFlag","target","findInitialNode","rowNode","columnNode","k","index","length","includes","createEdges","alphaMap","resultString","forEach","edge","textContent","printResult"],"mappings":"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","file":"app.002d89a36117cf5ac171.js","sourcesContent":["function prims(matrixArr) {\n  let resultWeight = 0;\n  const visited = [];\n  const edges = [];\n  let min = Infinity;\n  let unconnectedGraphFlag = true;\n\n  findInitialNode();\n  createEdges();\n\n  function findInitialNode() {\n    let target = 0;\n    for (let i = 0; i < 7; i += 1) {\n      for (let j = 0; j < 7; j += 1) {\n        if (matrixArr[i][j] < min && matrixArr[i][j] !== 0) {\n          min = matrixArr[i][j];\n          target = i;\n        }\n      }\n    }\n    visited.push(target);\n  }\n\n  function createEdges() {\n    let rowNode = 0;\n    let columnNode = 0;\n\n    for (let k = 0; k < 6; k += 1) {\n      min = Infinity;\n      unconnectedGraphFlag = true;\n\n      for (let index = 0; index < visited.length; index += 1) {\n        const i = visited[index];\n        for (let j = 0; j < 7; j += 1) {\n          if (\n            matrixArr[i][j] < min &&\n            !visited.includes(j) &&\n            matrixArr[i][j] !== 0\n          ) {\n            unconnectedGraphFlag = false;\n            min = matrixArr[i][j];\n            columnNode = j;\n            rowNode = i;\n          }\n        }\n      }\n\n      visited.push(columnNode);\n      edges.push([rowNode, columnNode]);\n      resultWeight += min;\n    }\n  }\n\n  return { edges, resultWeight, unconnectedGraphFlag };\n}\n\nexport default prims;\n","import './style.css';\nimport prims from './prims';\n\nconst DOMNodes = (() => {\n  const matrix = document.querySelector('#matrix');\n  const generateBtn = document.querySelector('#generate-button');\n  const findPathBtn = document.querySelector('#find-path');\n  const resultText = document.querySelector('#result-text');\n  const resultWeight = document.querySelector('#result-weight');\n  return {\n    matrix,\n    generateBtn,\n    findPathBtn,\n    resultText,\n    resultWeight,\n  };\n})();\n\n(() => {\n  const matrixElementFields = initialMatrix();\n\n  DOMNodes.generateBtn.addEventListener('click', randomiseMatrixDivs);\n  DOMNodes.findPathBtn.addEventListener('click', main);\n\n  function initialMatrix() {\n    const arr = [];\n    for (let i = 0; i < 7; i += 1) {\n      arr.push([]);\n      for (let j = 0; j < 7; j += 1) {\n        const matrixElement = document.createElement('input');\n        matrixElement.classList.add('matrix-element');\n        matrixElement.value = 0;\n        arr[i][j] = matrixElement;\n        DOMNodes.matrix.appendChild(matrixElement);\n      }\n    }\n    return arr;\n  }\n  function randomiseMatrixDivs() {\n    for (let i = 0; i < 7; i += 1) {\n      for (let j = 0; j < 7; j += 1) {\n        if (i === j) {\n          matrixElementFields[i][j].value = 0;\n        }\n        if (i < j) {\n          matrixElementFields[i][j].value = Math.trunc(Math.random() * 26);\n        } else {\n          matrixElementFields[i][j].value = matrixElementFields[j][i].value;\n        }\n      }\n    }\n  }\n\n  function main() {\n    const matrixArr = constructArrFromFields(matrixElementFields);\n    const { edges, resultWeight, unconnectedFlag } = prims(matrixArr);\n    printResult(edges, resultWeight, matrixArr, unconnectedFlag);\n  }\n\n  function constructArrFromFields(matrixFields) {\n    const arr = [];\n    for (let i = 0; i < 7; i += 1) {\n      arr.push([]);\n      for (let j = 0; j < 7; j += 1) {\n        arr[i][j] = +matrixFields[i][j].value;\n      }\n    }\n    return arr;\n  }\n  function printResult(edges, resultWeight, matrixArr, unconnectedGraphFlag) {\n    const alphaMap = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\n    let resultString = '';\n\n    edges.forEach((edge) => {\n      const [i, j] = edge;\n      resultString += `${alphaMap[i]}-${alphaMap[j]}(${matrixArr[i][j]}), `;\n    });\n\n    resultString = `Result: ${resultString}`;\n\n    if (unconnectedGraphFlag) {\n      resultString += ' (Unconnected Graph)';\n    }\n\n    DOMNodes.resultText.textContent = resultString;\n    DOMNodes.resultWeight.textContent = `Total Weight: ${resultWeight}`;\n  }\n})();\n"],"sourceRoot":""}